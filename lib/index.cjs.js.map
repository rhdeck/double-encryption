{"version":3,"file":"index.cjs.js","sources":["../src/index.js"],"sourcesContent":["import { randomBytes } from \"crypto\";\nimport { Encoder, Decoder } from \"@raydeck/stream-crypto\";\nimport { promisify } from \"util\";\nclass Manager {\n  constructor(clientKey, encryptedKey) {\n    this.clientKey = clientKey;\n    this.encryptedKey = encryptedKey;\n  }\n  toObj() {\n    return {\n      clientKey: this.clientKey,\n      encryptedKey: this.encryptedKey\n    };\n  }\n  toString() {\n    return JSON.stringify(thid.toObj());\n  }\n  async encryptText(text) {\n    const key = await this.getEncryptionKey();\n    return await Encoder.encrypt(text, key);\n  }\n  async decryptText(buffer) {\n    const key = await this.getEncryptionKey();\n    return await Decoder.decryptText(buffer, key);\n  }\n  async encryptImage(b) {\n    const key = await this.getEncryptionKey();\n    return await Encoder.encrypt(b, key);\n  }\n  async decryptImage(b) {\n    const key = await this.getEncryptionKey();\n    return await Decoder.decryptBuffer(b, key);\n  }\n  async getEncryptionKey() {\n    if (this.encryptionKey) return this.encryptionKey;\n    const { clientKey, encryptedKey } = this.toObj();\n    if (!clientKey || !encryptedKey) throw \"No key stored\";\n    const clientKeyBuffer = Buffer.from(clientKey, \"base64\");\n    const encryptedKeyBuffer = Buffer.from(encryptedKey, \"base64\");\n    const encryptionKey = await Decoder.decryptBuffer(\n      encryptedKeyBuffer,\n      clientKeyBuffer\n    );\n    return (this.encryptionKey = encryptionKey);\n  }\n  async setKey(newKey) {\n    if (!newKey) throw \"requires a an argument\";\n    if (typeof newKey == \"string\") newKey = Buffer.from(newKey, \"base64\");\n    const encryptionKey = await this.getEncryptionKey();\n    if (!encryptionKey) throw \"there is no stored key\";\n    //Need to re-encrypt\n    const newEncryptedKey = await Decoder.encryptBuffer(encryptionKey, newKey);\n    const newEncryptedKey64 = newEncryptedKey.toString(\"base64\");\n    const newKey64 = newKey.toString(\"base64\");\n    this.clientKey = newKey64;\n    this.encryptedKey = newEncryptedKey64;\n  }\n}\n\nManager.create = async (length = 32) => {\n  const toEncrypt = await makeRandomKeyBuffer(length);\n  const clientKey = await makeRandomKeyBuffer(length);\n  const encryptedKey = await Encoder.encrypt(toEncrypt, clientKey);\n  return new Manager(clientKey, encryptedKey);\n};\nManager.makeRandomKey = makeRandomKey;\nManager.makeRandomKeyBuffer = makeRandomKeyBuffer;\nasync function makeRandomKeyBuffer(length = 32) {\n  return promisify(randomBytes)(length);\n}\nasync function makeRandomKey(length = 32) {\n  const buf = await makeRandomKeyBuffer(length);\n  return buf.toString(\"base64\");\n}\nexport default Manager;\n"],"names":["Manager","constructor","clientKey","encryptedKey","toObj","toString","JSON","stringify","thid","encryptText","text","key","getEncryptionKey","Encoder","encrypt","decryptText","buffer","Decoder","encryptImage","b","decryptImage","decryptBuffer","encryptionKey","clientKeyBuffer","Buffer","from","encryptedKeyBuffer","setKey","newKey","newEncryptedKey","encryptBuffer","newEncryptedKey64","newKey64","create","length","toEncrypt","makeRandomKeyBuffer","makeRandomKey","promisify","randomBytes","buf"],"mappings":"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"}